#!/bin/sh

usage()
{
    echo "Usage:"
    echo "$0 [-c CONFIG-FILENAME] [-i]"
    echo "    Start anond"
    echo "$0 -s [-a IP-ADDRESS] [-p PORT]"
    echo "    Stop anond"
    echo "$0 -r [-a IP-ADDRESS] [-p PORT]"
    echo "    Reread the anond config file"
    echo "$0 -k <SELF-SIGNED CERTIFICATE FILENAME>"
    echo "    Generate a self-signed SSL certificate"
    echo "$0 -j <PUBLIC KEY FILENAME> <PRIVATE KEY FILENAME>"
    echo "    Generate a public/private key pair used for signing"
    echo "$0 -h"
    echo "    This help text"
    exit 1
}

args=options=$(getopt -u "c:sra:p:ik:j:h" -- "$@")

set -- $args

bindir=`dirname $0`
erl=${bindir}/erl
boot=" -boot ${bindir}/start"
mode="daemon"
config=""
address=""
port=""
interactive="no"
pa=""

# @DEVEL_ONLY_START
if [ ! -f ${erl} ]; then
    erl="erl"
    pa=" -pa ${bindir}/../lib/common/ebin -pa ${bindir}/../lib/ds/ebin -pa ${bindir}/../lib/jsx/ebin -pa ${bindir}/../lib/node/ebin -pa ${bindir}/../lib/procket/ebin -pa ${bindir}/../lib/salt/ebin -pa ${bindir}/../lib/test/ebin -pa ${bindir}/../lib/tunctl/ebin -pa ${bindir}/../lib/util/ebin"
fi
# @DEVEL_ONLY_STOP

while [ $# -gt 0 ]; do
    case $1 in
        -c)
            config=" --config $2"
            shift
            ;;
        -s)
            mode="stop"
            boot=" -boot ${bindir}/start_clean"
            ;;
        -r)
            mode="reload"
            boot=" -boot ${bindir}/start_clean"
            ;;
        -a)
            address=" --control-address $2"
            shift
            ;;
        -p)
            port=" --control-port $2"
            shift
            ;;
        -h)
            usage
            ;;
        -i)
            interactive="yes"
            ;;
        -k)
            if [ $# -ne 2 ]; then
                usage
            fi
            if which openssl > /dev/null; then
                openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -subj "/" -keyout /tmp/key.pem -out /tmp/cert.pem > /dev/null 2>&1
                cat /tmp/key.pem /tmp/cert.pem > $2
                rm -f /tmp/key.pem /tmp/cert.pem
                exit 0
            else
                echo "OpenSSL must be installed to create a certificate"
                exit 1
            fi
            ;;
        -j)
            if [ $# -lt 3 ]; then
                usage
            fi
            mode="create_sign_keypair_files"
            boot=" -boot ${bindir}/start_clean"
            public_key_file="$2"
            private_key_file="$3"
            shift 2
            ;;
        --)
            ;;
        -*)
            usage
            ;;
        *)
            ;;
    esac
    shift
done

if [ ${interactive} = "yes" ]; then
    shell=""
else
    if [ ${mode} = "daemon" ]; then
        shell=" -detached"
    else
        shell=" -noinput"
    fi
fi

case ${mode} in
    daemon)
        exec ${erl}${shell}${pa}${boot}${config}
        break
        ;;
    stop)
        exec ${erl}${shell}${pa}${boot}${address}${port} -run common_config_json_serv stop
        break
        ;;
    reload)
        exec ${erl}${shell}${pa}${boot}${address}${port} -run common_config_json_serv reload
        ;;
    create_sign_keypair_files)
        exec ${erl}${shell}${pa}${boot}${address}${port} -run cryptolib create_sign_keypair_files ${public_key_file} ${private_key_file}
        ;;
esac
